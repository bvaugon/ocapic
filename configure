#! /bin/bash
###########################################################################
##                                                                       ##
##                                OCaPIC                                 ##
##                                                                       ##
##                             Benoit Vaugon                             ##
##                                                                       ##
##    This file is distributed under the terms of the CeCILL license.    ##
##    See file LICENSE-en.                                               ##
##                                                                       ##
###########################################################################

function error () {
    echo "$@" 1>&2
    exit 1
}

function usage () {
    echo "$@" 1>&2
    error "Usage: $0 [ OPTIONS... ]
 -bindir <dir>   Directory where the binaries will be installed
                 (default: /usr/local/bin)
 -libdir <dir>   Directory where the OCaml library PIC tools will be installed
                 (default: /usr/local/lib/ocapic)
 -mandir <dir>   Directory where the manual pages will be installed
                 (default: /usr/local/man)
 -prefix <dir>   Set bindir, libdir and mandir to <dir>/bin, <dir>/lib/ocapic
                 and <dir>/man respectively
 -cc <cmd>       C compiler to use for building the system
 -pics <regexp>  Choose PIC to be managed by OCaPIC"
}

function check_command () {
    which "$1" > /dev/null
    if [ $? -ne 0 ]; then
        error "Error: \"$1\" not installed"
    fi
}

function check_absolute_path () {
    case "$1" in
        /*);;
        *) error "Error: \"$1\" is not an absolute path";;
    esac
}

function remove_trailing_slash () {
    echo "$1" | sed 'sX^\(.*[^/]\)/*$X\1X'
}

###

check_command "ocaml"
check_command "ocamlc"
check_command "ocamlopt"
check_command "ocamlbuild"
check_command "ocamldep"
check_command "ocamldoc"
check_command "camlp4"
check_command "mkdir"
check_command "rmdir"
check_command "chmod"
check_command "grep"
check_command "echo"
check_command "cat"
check_command "sed"
check_command "cp"
check_command "rm"
check_command "ar"
check_command "cp"
check_command "cc"

###

OCAML="$(wich ocaml.opt 2> /dev/null || which ocaml)"
OCAMLOPT="$(which ocamlopt.opt 2> /dev/null || which ocamlopt)"
OCAMLC="$(which ocamlc.opt 2> /dev/null || which ocamlc)"
OCAMLDOC="$(wich ocamldoc.opt 2> /dev/null || which ocamldoc)"
CAMLP4="$(which camlp4)"
OCAMLBUILD="$(which ocamlbuild)"
CAMLLIB="$(ocamlc -where)"
VERSION="$(cat VERSION)"
SAVED_PWD=$(pwd)

###

CC=$(which gcc 2> /dev/null || which cc)
BINDIR=/usr/local/bin
LIBDIR=/usr/local/lib/ocapic
MANDIR=/usr/local/man
OCAMLSTDLIB=$($OCAMLC -where)
PICS_REGEXP='18f4620'

while [ $# -ne 0 ]; do
    case "$1" in
        -pics)
            PICS_REGEXP="$2" ;;
        -cc)
            CC="$2" ;;
        -bindir)
            check_absolute_path "$2"
            BINDIR="$(remove_trailing_slash "$2")" ;;
        -libdir)
            check_absolute_path "$2"
            LIBDIR="$(remove_trailing_slash "$2")" ;;
        -mandir)
            check_absolute_path "$2"
            MANDIR="$(remove_trailing_slash "$2")" ;;
        -prefix)
            check_absolute_path "$2"
            PREFIX="$(remove_trailing_slash "$2")"
            BINDIR="$PREFIX/bin"
            LIBDIR="$PREFIX/lib/ocapic"
            MANDIR="$PREFIX/man" ;;
        *)
        usage "Don't know what to do with \"$1\""
    esac
    shift
    shift
done

###

ALL_PICS=$(echo $(ls src/pics/pic*.reg | sed 'sXsrc/pics/pic\(.*\)\.regX\1X'))

SELECTED_PICS=$(echo $(ls src/pics/pic*.reg | \
    sed 'sXsrc/pics/pic\(.*\)\.regX\1X' | \
    grep -E -o "^$PICS_REGEXP$"))

PICS_NB=0; for p in $SELECTED_PICS; do PICS_NB=$((PICS_NB+1)); done

if [ $PICS_NB -eq 0 ]; then
  error "Error: invalid regexp: '$PICS_REGEXP' \
(no memory map found in src/pics/)"
fi

echo "$PICS_NB selected PIC: $SELECTED_PICS"

###

OCAMLCLEAN_LOCAL_VERSION=$(
    echo ocamlclean/ocamlclean-*.tar.bz2 | \
        sed 'sX.*ocamlclean/ocamlclean-\(.*\)\.tar\.bz2$X\1X'
)
INSTALLED_OCAMLCLEAN="$(which ocamlclean 2> /dev/null)"
if [ $? -eq 0 ]; then
    INSTALLED_OCAMLCLEAN_VERSION=$("$INSTALLED_OCAMLCLEAN" -version)
    if [ $INSTALLED_OCAMLCLEAN_VERSION '<' $OCAMLCLEAN_LOCAL_VERSION ]; then
        echo -n "Warning: an old OCamlClean version is already installed: "
        echo  "$INSTALLED_OCAMLCLEAN_VERSION"
        echo  -n "  => configure new embedded OCamlClean version: "
        echo "$OCAMLCLEAN_LOCAL_VERSION"
        INSTALL_OCAMLCLEAN=true
        if [ "$INSTALLED_OCAMLCLEAN" != "$BINDIR/ocamlclean" ]; then
            echo -n "Warning: OCamlClean was installed in: "
            echo "$INSTALLED_OCAMLCLEAN"
            echo -n "  The new version will be installed in: "
            echo "$BINDIR/ocamlclean"
        fi
    else
        INSTALL_OCAMLCLEAN=false
        OCAMLCLEAN="$INSTALLED_OCAMLCLEAN"
        OCAMLCLEAN_VERSION="$INSTALLED_OCAMLCLEAN_VERSION"
        OCAMLCLEAN_DIRECTORY="-none-"
        OCAMLCLEAN_ARCHIVE="-none-"
    fi
else
    echo -n "Warning: OCamlClean not installed => configure OCamlClean "
    echo "$OCAMLCLEAN_LOCAL_VERSION"
    INSTALL_OCAMLCLEAN=true
fi

if [ $INSTALL_OCAMLCLEAN = true ]; then
    OCAMLCLEAN="$BINDIR/ocamlclean"
    OCAMLCLEAN_VERSION="$OCAMLCLEAN_LOCAL_VERSION"
    OCAMLCLEAN_DIRECTORY="$SAVED_PWD/ocamlclean/ocamlclean-$OCAMLCLEAN_VERSION"
    OCAMLCLEAN_ARCHIVE="$OCAMLCLEAN_DIRECTORY.tar.bz2"
    cd "ocamlclean"
    tar jxf "$OCAMLCLEAN_ARCHIVE"
    cd "$OCAMLCLEAN_DIRECTORY"
    ./configure -bindir "$BINDIR" -mandir "$MANDIR"
    cd "$SAVED_PWD"
fi

###

echo -n "\
INSTALL_OCAMLCLEAN = $INSTALL_OCAMLCLEAN
OCAMLCLEAN = $OCAMLCLEAN
OCAMLCLEAN_VERSION = $OCAMLCLEAN_VERSION
OCAMLCLEAN_DIRECTORY = $OCAMLCLEAN_DIRECTORY
OCAMLCLEAN_ARCHIVE = $OCAMLCLEAN_ARCHIVE
ALL_PICS = $ALL_PICS
SELECTED_PICS = $SELECTED_PICS
BINDIR = $BINDIR
LIBDIR = $LIBDIR
MAN1DIR = $MANDIR/man1
MAN3DIR = $MANDIR/man3
CC = $CC
OCAMLC = $OCAMLC -w Ae -warn-error A -safe-string -strict-formats -strict-sequence
OCAMLOPT = $OCAMLOPT -w Ae -warn-error A -safe-string -strict-formats -strict-sequence
OCAMLDOC = $OCAMLDOC
OCAMLC_UNSAFE = $OCAMLC
OCAMLBUILD = $OCAMLBUILD -cflags -w,Ae,-warn-error,A,-safe-string,-strict-formats,-strict-sequence -lflags -w,Ae,-warn-error,A,-safe-string,-strict-formats,-strict-sequence -no-links -classic-display
OCAMLSTDLIB = $OCAMLSTDLIB
SRC = $SAVED_PWD/src
BIN = $SAVED_PWD/bin
LIB = $SAVED_PWD/lib
ETC = $SAVED_PWD/etc
DIST = $SAVED_PWD/dist
ONE_PIC = $(echo $SELECTED_PICS | grep -o '^[^ ]*')
define compile
        @make --no-print-directory -q -C \$1 && \
        make --no-print-directory -C \$1 || \
        make -C \$1
endef
define clean
        @make --no-print-directory -C \$1 clean > /dev/null
endef
define capitalize
 \$(shell echo \$1 | cut -c1 | tr [:lower:] [:upper:])\$(shell echo \$1 \
| cut -c2-\$)
endef
define uncapitalize
 \$(shell echo \$1 | cut -c1 | tr [:upper:] [:lower:])\$(shell echo \$1 \
| cut -c2-\$)
endef

" > etc/Makefile.conf

###

(
    echo -n "\
let libdir = \"$LIBDIR\"
let ocaml = \"$OCAML\"
let ocamlc = \"$OCAMLC\"
let camlp4 = \"$CAMLP4\"
let camllib = \"$CAMLLIB\"
let bc2asm = \"$BINDIR/bc2asm\"
let ocamlclean = \"$OCAMLCLEAN\"
let version = \"$VERSION\"
let supported_pics = [
"
    for pic in $SELECTED_PICS; do
        echo "  \"$pic\";"
    done
    echo "]"
) > etc/config.ml

###

echo -n "\
OCAPIC = $BINDIR/ocapic
" > etc/TestsMakefile.conf

###

echo "** OCaPIC configuration completed successfully **"
